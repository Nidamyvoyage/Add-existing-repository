{
	"name": "Publish_2_FAST_PARTY_UPDATE",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fast_adls",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "FASTU_PARTY",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "Person_xref_sourceIdentifier",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FASTU_PARTY",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "FASTU_PARTY",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "insert"
				},
				{
					"name": "exists2"
				},
				{
					"name": "exists3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "update"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PERSON_MDM_ID as string,",
				"          PARTY_TYPE as string,",
				"          PREFIX as string,",
				"          FIRST_NAME as string,",
				"          MIDDLE_NAME as string,",
				"          LAST_NAME as string,",
				"          SUFFIX as string,",
				"          FULL_NAME as string,",
				"          GENDER as string,",
				"          MARITAL_STATUS as string,",
				"          BIRTH_DT as date,",
				"          BIRTH_PLACE as string,",
				"          DEATH_DT as date,",
				"          SSN as string,",
				"          ITIN as string,",
				"          DRIVER_LICENSE as string,",
				"          PRIMARY_STREET_ADDR as string,",
				"          PRIMARY_ADDR_LINE1 as string,",
				"          PRIMARY_ADDR_LINE2 as string,",
				"          PRIMARY_ADDR_LINE3 as string,",
				"          PRIMARY_ADDR_CITY as string,",
				"          PRIMARY_ADDR_STATECODE as string,",
				"          PRIMARY_ADDR_POSTALCODE as string,",
				"          PRIMARY_COUNTRYCODE as string,",
				"          PRIMARY_COUNTYNAME as string,",
				"          PERSON_FLAG as string,",
				"          SRC_SYS_NAME as string,",
				"          PERSON_CHECK_SUM as string,",
				"          PARTY_CHECK_SUM as string,",
				"          PARTY_TYPE_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     moveFiles: ['/FAST_ADLS/PERSON','/DELETED_FAST_ADLS/PERSON'],",
				"     format: 'parquet') ~> source1",
				"source(output(",
				"          PARTY_MDM_ID as string,",
				"          PARTY_TYPE_ID as integer,",
				"          RISK_IND as string,",
				"          SRC_SYS_NAME as string,",
				"          DELETE_IND as string,",
				"          BATCH_ID as string,",
				"          CHECK_SUM as string,",
				"          CREATED_TS as timestamp,",
				"          CREATED_BY as string,",
				"          LAST_UPDATED_TS as timestamp,",
				"          LAST_UPDATED_BY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select  * from PARTYACCT_REPOS.PARTY_BASELINE',",
				"     format: 'query') ~> source2",
				"source(output(",
				"          SourceIdentifier as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     purgeFiles: true,",
				"     format: 'parquet') ~> source3",
				"source1, source2 exists(PERSON_MDM_ID == PARTY_MDM_ID && PARTY_TYPE == 'PERSON',",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(Del_Ind = 'N',",
				"          Created_Ts = currentTimestamp(),",
				"          created_By = 'DEV',",
				"          updated_Ts = currentTimestamp(),",
				"          UPDATED_BY = 'DEV',",
				"          bactch = 100) ~> derivedColumn1",
				"derivedColumn1 alterRow(insertIf(1==1)) ~> insert",
				"source1, source2 exists(PERSON_MDM_ID == PARTY_MDM_ID && PARTY_TYPE == 'PERSON',",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2, source3 exists(SourceIdentifier == SourceIdentifier,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists3",
				"exists3 derive(del_ind = 'Y',",
				"          BATCH_ID = 101,",
				"          CTS = currentTimestamp(),",
				"          CBY = 'DEV',",
				"          UTS = currentTimestamp(),",
				"          UBY = 'DEV') ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(1==1)) ~> update",
				"insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PARTY_MDM_ID as string,",
				"          PARTY_TYPE_ID as integer,",
				"          RISK_IND as string,",
				"          SRC_SYS_NAME as string,",
				"          DELETE_IND as string,",
				"          BATCH_ID as string,",
				"          CHECK_SUM as string,",
				"          CREATED_TS as timestamp,",
				"          CREATED_BY as string,",
				"          LAST_UPDATED_TS as timestamp,",
				"          LAST_UPDATED_BY as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PARTY_MDM_ID = PERSON_MDM_ID,",
				"          PARTY_TYPE_ID,",
				"          SRC_SYS_NAME,",
				"          DELETE_IND = Del_Ind,",
				"          CHECK_SUM = PERSON_CHECK_SUM,",
				"          BATCH_ID = bactch,",
				"          CREATED_TS = Created_Ts,",
				"          CREATED_BY = created_By,",
				"          LAST_UPDATED_TS = updated_Ts,",
				"          LAST_UPDATED_BY = UPDATED_BY",
				"     )) ~> sink1",
				"update sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PARTY_MDM_ID as string,",
				"          PARTY_TYPE_ID as integer,",
				"          RISK_IND as string,",
				"          SRC_SYS_NAME as string,",
				"          DELETE_IND as string,",
				"          BATCH_ID as string,",
				"          CHECK_SUM as string,",
				"          CREATED_TS as timestamp,",
				"          CREATED_BY as string,",
				"          LAST_UPDATED_TS as timestamp,",
				"          LAST_UPDATED_BY as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PARTY_MDM_ID = PERSON_MDM_ID,",
				"          PARTY_TYPE_ID,",
				"          SRC_SYS_NAME,",
				"          DELETE_IND = del_ind,",
				"          BATCH_ID,",
				"          CHECK_SUM = PARTY_CHECK_SUM,",
				"          CREATED_TS = CTS,",
				"          CREATED_BY = CBY,",
				"          LAST_UPDATED_TS = UTS,",
				"          LAST_UPDATED_BY = UBY",
				"     )) ~> sink2"
			]
		}
	}
}