{
	"name": "ease_omni_validation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ease_omni",
						"type": "DatasetReference"
					},
					"name": "sourceall"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "omni_valid_records",
						"type": "DatasetReference"
					},
					"name": "validrecords"
				},
				{
					"dataset": {
						"referenceName": "ease_omni_invalid_records",
						"type": "DatasetReference"
					},
					"name": "invalidrecords"
				}
			],
			"transformations": [
				{
					"name": "chackvalidation"
				},
				{
					"name": "checkvalid"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Column_1 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceall",
				"sourceall derive(valid_flag = iif((length(Column_1)-length(regexReplace(Column_1, '|', '')))==59,'Y','N')) ~> chackvalidation",
				"chackvalidation split(valid_flag=='Y',",
				"     disjoint: false) ~> checkvalid@(validrecords, invalidrecords)",
				"checkvalid@validrecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> validrecords",
				"checkvalid@invalidrecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> invalidrecords"
			]
		}
	}
}