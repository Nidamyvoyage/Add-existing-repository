{
	"name": "Deleting duplicates",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AZURESQL_EASE_OMNI_STAGE",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "DS_PersonAddress_TGT",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_PersonAddress_TGT",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				},
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SOURCE_KEY as string,",
				"          WS_EXT_PH_NAME as string,",
				"          WS_EXT_PH_PART_NUM as string,",
				"          LAST_NAME as string,",
				"          FIRST_NAME as string,",
				"          MIDDLE_NAME as string,",
				"          WS_EXT_PH_BRTH_DATE as date,",
				"          WS_EXT_PH_ADDR_L1 as string,",
				"          WS_EXT_PH_ADDR_L2 as string,",
				"          WS_EXT_PH_ADDR_L3 as string,",
				"          WS_EXT_PH_CITY as string,",
				"          WS_EXT_PH_STATE as string,",
				"          WS_EXT_PH_ZIP as string,",
				"          ZIP_CODE5 as string,",
				"          WS_EXT_PH_OMNI_VERSION as string,",
				"          CHANGE_CODE as string,",
				"          BATCH_ID as string,",
				"          COUNTRY_CODE as string,",
				"          WS_EXT_PH_STAT as string,",
				"          PERSON_CHECK_SUM as string,",
				"          PERADDR_CHECK_SUM as string,",
				"          PERSONIDENT_CHECK_SUM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: '\\nSELECT SOURCE_KEY,WS_EXT_PH_NAME, WS_EXT_PH_PART_NUM, LAST_NAME,\\nCASE WHEN CHARINDEX(\\' \\',FIRST_NAME) > 0 THEN trim(SUBSTRING(FIRST_NAME,1,CHARINDEX(\\' \\',FIRST_NAME))) ELSE FIRST_NAME END AS FIRST_NAME,\\nCASE WHEN CHARINDEX(\\' \\',FIRST_NAME) > 0 THEN trim(SUBSTRING(FIRST_NAME,CHARINDEX(\\' \\',FIRST_NAME),LEN(FIRST_NAME))) ELSE NULL END AS MIDDLE_NAME,\\nWS_EXT_PH_BRTH_DATE,WS_EXT_PH_ADDR_L1,WS_EXT_PH_ADDR_L2,WS_EXT_PH_ADDR_L3,WS_EXT_PH_CITY,WS_EXT_PH_STATE,WS_EXT_PH_ZIP,ZIP_CODE5,WS_EXT_PH_OMNI_VERSION,CHANGE_CODE,BATCH_ID,\\nCOUNTRY_CODE,WS_EXT_PH_STAT,PERSON_CHECK_SUM,PERADDR_CHECK_SUM,PERSONIDENT_CHECK_SUM\\nFROM (\\nSELECT A.SOURCE_KEY,A.WS_EXT_PH_PART_NUM,UPPER(A.WS_EXT_PH_NAME) WS_EXT_PH_NAME, \\nCASE WHEN A.ws_ext_ph_name like \\'%,%\\' THEN UPPER(trim(SUBSTRING(A.ws_ext_ph_name,1,(CHARINDEX(\\',\\',A.ws_ext_ph_name)-1))))\\nELSE UPPER(A.WS_EXT_PH_NAME) END AS LAST_NAME,\\nCASE WHEN A.ws_ext_ph_name like \\'%,%\\' THEN UPPER(trim(SUBSTRING(A.ws_ext_ph_name,CHARINDEX(\\',\\',A.ws_ext_ph_name)+1,LEN(A.ws_ext_ph_name)))) \\nELSE NULL END AS FIRST_NAME,\\nCAST(A.WS_EXT_PH_BRTH_DATE as date) as WS_EXT_PH_BRTH_DATE, CASE WHEN UPPER(ISNULL(A.WS_EXT_PH_ADDR_L1,\\'\\'))= \\'\\' THEN NULL ELSE WS_EXT_PH_ADDR_L1 END AS WS_EXT_PH_ADDR_L1 , CASE WHEN UPPER(ISNULL(A.WS_EXT_PH_ADDR_L2,\\'\\'))= \\'\\' THEN NULL ELSE WS_EXT_PH_ADDR_L2 END AS WS_EXT_PH_ADDR_L2 ,CASE WHEN UPPER(ISNULL(A.WS_EXT_PH_ADDR_L3,\\'\\'))= \\'\\' THEN NULL ELSE WS_EXT_PH_ADDR_L3 END AS WS_EXT_PH_ADDR_L3 ,\\nCASE WHEN UPPER(ISNULL(A.WS_EXT_PH_CITY,\\'\\'))= \\'\\' THEN NULL ELSE WS_EXT_PH_CITY END AS WS_EXT_PH_CITY, CASE WHEN UPPER(A.WS_EXT_PH_STATE)=\\'\\' THEN NULL ELSE WS_EXT_PH_STATE END AS WS_EXT_PH_STATE ,\\nCASE WHEN UPPER(A.WS_EXT_PH_ZIP)=\\'\\' THEN NULL ELSE WS_EXT_PH_ZIP END AS WS_EXT_PH_ZIP ,CASE WHEN SUBSTRING(A.WS_EXT_PH_ZIP,1,5)=\\'\\' THEN NULL ELSE SUBSTRING(A.WS_EXT_PH_ZIP,1,5) END AS ZIP_CODE5, UPPER(A.WS_EXT_PH_OMNI_VERSION) WS_EXT_PH_OMNI_VERSION,UPPER(A.CHANGE_CODE) CHANGE_CODE,UPPER(B.COUNTRY_CODE) COUNTRY_CODE,UPPER(A.WS_EXT_PH_STAT) WS_EXT_PH_STAT,\\nCONVERT(NVARCHAR(32),HashBytes(\\'MD5\\',ISNULL(WS_EXT_PH_NAME,\\'1\\')+ISNULL(WS_EXT_PH_PART_NUM,\\'2\\')+ISNULL(WS_EXT_PH_BRTH_DATE,\\'3\\')+ISNULL(WS_EXT_PH_ADDR_L1,\\'4\\')+ISNULL(WS_EXT_PH_ADDR_L2,\\'5\\')+\\nISNULL(WS_EXT_PH_ADDR_L3,\\'6\\')+ISNULL(WS_EXT_PH_CITY,\\'7\\')+ISNULL(WS_EXT_PH_STATE,\\'8\\')+ISNULL(WS_EXT_PH_ZIP,\\'9\\')+ISNULL(WS_EXT_PH_STAT,\\'10\\') Â  Â ),2) PERSON_CHECK_SUM,\\nCONVERT(NVARCHAR(32),HashBytes(\\'MD5\\',ISNULL(WS_EXT_PH_ADDR_L1,\\'4\\')+ISNULL(WS_EXT_PH_ADDR_L2,\\'5\\')+ISNULL(WS_EXT_PH_ADDR_L3,\\'6\\')+ISNULL(WS_EXT_PH_CITY,\\'7\\')+ISNULL(WS_EXT_PH_STATE,\\'8\\')+ISNULL(WS_EXT_PH_ZIP,\\'9\\')),2) PERADDR_CHECK_SUM, batch_id,\\nCONVERT(NVARCHAR(32),HashBytes(\\'MD5\\',ISNULL(WS_EXT_PH_PART_NUM,\\'2\\')),2) PERSONIDENT_CHECK_SUM\\nFROM CMDM_STAGE.RS_OMNI_VIPS_DAILY_PART_HEADER_DELTA_STG A LEFT JOIN \\nCMDM_STAGE.STATE_MASTER B ON UPPER(TRIM(A.WS_EXT_PH_STATE)) = UPPER(TRIM(B.STATE_CODE)) where WS_EXT_PH_NAME like \\'[V-W]%\\'\\n) T\\n\\n',",
				"     format: 'query') ~> source2",
				"source(output(",
				"          addressType as string,",
				"          streetAddress as string,",
				"          addressLine1 as string,",
				"          addressLine2 as string,",
				"          addressLine3 as string,",
				"          cityName as string,",
				"          stateCD as string,",
				"          postalCode as string,",
				"          poBox as string,",
				"          mailBoxNumber as string,",
				"          countryCD as string,",
				"          postalCode5 as string,",
				"          srcPersonPkey as string,",
				"          sourceSystem as string,",
				"          srcAddressPkey as string,",
				"          primaryFlag as string,",
				"          row_status as string,",
				"          batch_id as string,",
				"          check_sum as string,",
				"          createDateTime as timestamp,",
				"          createdBy as string,",
				"          lastUpdateDateTime as timestamp,",
				"          lastUpdatedBy as string,",
				"          SourceLastUpdateDateTime as timestamp,",
				"          SourceCreateDateTime as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from [CMDM_STAGE].[PersonAddress] where sourceSystem=\\'OMNI 7.1\\' or sourceSystem=\\'VIPS 5.2\\' or sourceSystem=\\'\\'',",
				"     format: 'query') ~> source4",
				"exists1 alterRow(deleteIf(1==1)) ~> alterRow1",
				"source4, source2 exists(check_sum == PERSON_CHECK_SUM,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          addressType as string,",
				"          streetAddress as string,",
				"          addressLine1 as string,",
				"          addressLine2 as string,",
				"          addressLine3 as string,",
				"          cityName as string,",
				"          stateCD as string,",
				"          postalCode as string,",
				"          poBox as string,",
				"          mailBoxNumber as string,",
				"          countryCD as string,",
				"          postalCode5 as string,",
				"          srcPersonPkey as string,",
				"          sourceSystem as string,",
				"          srcAddressPkey as string,",
				"          status as string,",
				"          primaryFlag as string,",
				"          createDateTime as timestamp,",
				"          createdBy as string,",
				"          lastUpdateDateTime as timestamp,",
				"          lastUpdatedBy as string",
				"     ),",
				"     deletable:true,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     keys:['addressType'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          addressType,",
				"          streetAddress,",
				"          addressLine1,",
				"          addressLine2,",
				"          addressLine3,",
				"          cityName,",
				"          stateCD,",
				"          postalCode,",
				"          poBox,",
				"          mailBoxNumber,",
				"          countryCD,",
				"          postalCode5,",
				"          srcPersonPkey,",
				"          sourceSystem,",
				"          primaryFlag,",
				"          createDateTime,",
				"          createdBy,",
				"          lastUpdateDateTime,",
				"          lastUpdatedBy",
				"     )) ~> sink1"
			]
		}
	}
}